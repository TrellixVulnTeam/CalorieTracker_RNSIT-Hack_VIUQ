{"ast":null,"code":"/*!\n  * Bootstrap event-handler.js v5.0.2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.EventHandler = factory());\n})(this, function () {\n  'use strict';\n\n  const getjQuery = () => {\n    const {\n      jQuery\n    } = window;\n\n    if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n      return jQuery;\n    }\n\n    return null;\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.2): dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n  const stripNameRegex = /\\..*/;\n  const stripUidRegex = /::\\d+$/;\n  const eventRegistry = {}; // Events storage\n\n  let uidEvent = 1;\n  const customEvents = {\n    mouseenter: 'mouseover',\n    mouseleave: 'mouseout'\n  };\n  const customEventsRegex = /^(mouseenter|mouseleave)/i;\n  const nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n  /**\n   * ------------------------------------------------------------------------\n   * Private methods\n   * ------------------------------------------------------------------------\n   */\n\n  function getUidEvent(element, uid) {\n    return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;\n  }\n\n  function getEvent(element) {\n    const uid = getUidEvent(element);\n    element.uidEvent = uid;\n    eventRegistry[uid] = eventRegistry[uid] || {};\n    return eventRegistry[uid];\n  }\n\n  function bootstrapHandler(element, fn) {\n    return function handler(event) {\n      event.delegateTarget = element;\n\n      if (handler.oneOff) {\n        EventHandler.off(element, event.type, fn);\n      }\n\n      return fn.apply(element, [event]);\n    };\n  }\n\n  function bootstrapDelegationHandler(element, selector, fn) {\n    return function handler(event) {\n      const domElements = element.querySelectorAll(selector);\n\n      for (let {\n        target\n      } = event; target && target !== this; target = target.parentNode) {\n        for (let i = domElements.length; i--;) {\n          if (domElements[i] === target) {\n            event.delegateTarget = target;\n\n            if (handler.oneOff) {\n              // eslint-disable-next-line unicorn/consistent-destructuring\n              EventHandler.off(element, event.type, selector, fn);\n            }\n\n            return fn.apply(target, [event]);\n          }\n        }\n      } // To please ESLint\n\n\n      return null;\n    };\n  }\n\n  function findHandler(events, handler) {\n    let delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const uidEventList = Object.keys(events);\n\n    for (let i = 0, len = uidEventList.length; i < len; i++) {\n      const event = events[uidEventList[i]];\n\n      if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n        return event;\n      }\n    }\n\n    return null;\n  }\n\n  function normalizeParams(originalTypeEvent, handler, delegationFn) {\n    const delegation = typeof handler === 'string';\n    const originalHandler = delegation ? delegationFn : handler;\n    let typeEvent = getTypeEvent(originalTypeEvent);\n    const isNative = nativeEvents.has(typeEvent);\n\n    if (!isNative) {\n      typeEvent = originalTypeEvent;\n    }\n\n    return [delegation, originalHandler, typeEvent];\n  }\n\n  function addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return;\n    }\n\n    if (!handler) {\n      handler = delegationFn;\n      delegationFn = null;\n    } // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n    // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n\n\n    if (customEventsRegex.test(originalTypeEvent)) {\n      const wrapFn = fn => {\n        return function (event) {\n          if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n            return fn.call(this, event);\n          }\n        };\n      };\n\n      if (delegationFn) {\n        delegationFn = wrapFn(delegationFn);\n      } else {\n        handler = wrapFn(handler);\n      }\n    }\n\n    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n    const events = getEvent(element);\n    const handlers = events[typeEvent] || (events[typeEvent] = {});\n    const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null);\n\n    if (previousFn) {\n      previousFn.oneOff = previousFn.oneOff && oneOff;\n      return;\n    }\n\n    const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''));\n    const fn = delegation ? bootstrapDelegationHandler(element, handler, delegationFn) : bootstrapHandler(element, handler);\n    fn.delegationSelector = delegation ? handler : null;\n    fn.originalHandler = originalHandler;\n    fn.oneOff = oneOff;\n    fn.uidEvent = uid;\n    handlers[uid] = fn;\n    element.addEventListener(typeEvent, fn, delegation);\n  }\n\n  function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n    const fn = findHandler(events[typeEvent], handler, delegationSelector);\n\n    if (!fn) {\n      return;\n    }\n\n    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n    delete events[typeEvent][fn.uidEvent];\n  }\n\n  function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n    const storeElementEvent = events[typeEvent] || {};\n    Object.keys(storeElementEvent).forEach(handlerKey => {\n      if (handlerKey.includes(namespace)) {\n        const event = storeElementEvent[handlerKey];\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n      }\n    });\n  }\n\n  function getTypeEvent(event) {\n    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n    event = event.replace(stripNameRegex, '');\n    return customEvents[event] || event;\n  }\n\n  const EventHandler = {\n    on(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, false);\n    },\n\n    one(element, event, handler, delegationFn) {\n      addHandler(element, event, handler, delegationFn, true);\n    },\n\n    off(element, originalTypeEvent, handler, delegationFn) {\n      if (typeof originalTypeEvent !== 'string' || !element) {\n        return;\n      }\n\n      const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn);\n      const inNamespace = typeEvent !== originalTypeEvent;\n      const events = getEvent(element);\n      const isNamespace = originalTypeEvent.startsWith('.');\n\n      if (typeof originalHandler !== 'undefined') {\n        // Simplest case: handler is passed, remove that listener ONLY.\n        if (!events || !events[typeEvent]) {\n          return;\n        }\n\n        removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null);\n        return;\n      }\n\n      if (isNamespace) {\n        Object.keys(events).forEach(elementEvent => {\n          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n        });\n      }\n\n      const storeElementEvent = events[typeEvent] || {};\n      Object.keys(storeElementEvent).forEach(keyHandlers => {\n        const handlerKey = keyHandlers.replace(stripUidRegex, '');\n\n        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n          const event = storeElementEvent[keyHandlers];\n          removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector);\n        }\n      });\n    },\n\n    trigger(element, event, args) {\n      if (typeof event !== 'string' || !element) {\n        return null;\n      }\n\n      const $ = getjQuery();\n      const typeEvent = getTypeEvent(event);\n      const inNamespace = event !== typeEvent;\n      const isNative = nativeEvents.has(typeEvent);\n      let jQueryEvent;\n      let bubbles = true;\n      let nativeDispatch = true;\n      let defaultPrevented = false;\n      let evt = null;\n\n      if (inNamespace && $) {\n        jQueryEvent = $.Event(event, args);\n        $(element).trigger(jQueryEvent);\n        bubbles = !jQueryEvent.isPropagationStopped();\n        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n        defaultPrevented = jQueryEvent.isDefaultPrevented();\n      }\n\n      if (isNative) {\n        evt = document.createEvent('HTMLEvents');\n        evt.initEvent(typeEvent, bubbles, true);\n      } else {\n        evt = new CustomEvent(event, {\n          bubbles,\n          cancelable: true\n        });\n      } // merge custom information in our event\n\n\n      if (typeof args !== 'undefined') {\n        Object.keys(args).forEach(key => {\n          Object.defineProperty(evt, key, {\n            get() {\n              return args[key];\n            }\n\n          });\n        });\n      }\n\n      if (defaultPrevented) {\n        evt.preventDefault();\n      }\n\n      if (nativeDispatch) {\n        element.dispatchEvent(evt);\n      }\n\n      if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n        jQueryEvent.preventDefault();\n      }\n\n      return evt;\n    }\n\n  };\n  return EventHandler;\n});","map":{"version":3,"sources":["../../src/util/index.js","../../src/dom/event-handler.js"],"names":["getjQuery","jQuery","document","namespaceRegex","stripNameRegex","stripUidRegex","eventRegistry","uidEvent","customEvents","mouseenter","mouseleave","customEventsRegex","nativeEvents","uid","element","getUidEvent","event","handler","EventHandler","fn","domElements","target","i","delegationSelector","uidEventList","Object","len","events","delegation","originalHandler","typeEvent","getTypeEvent","isNative","delegationFn","wrapFn","normalizeParams","getEvent","handlers","previousFn","findHandler","originalTypeEvent","bootstrapDelegationHandler","bootstrapHandler","Boolean","storeElementEvent","handlerKey","removeHandler","on","addHandler","one","off","inNamespace","isNamespace","elementEvent","removeNamespacedHandlers","keyHandlers","trigger","$","bubbles","nativeDispatch","defaultPrevented","evt","jQueryEvent","cancelable","key","get","args"],"mappings":"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","sourcesContent":["import SelectorEngine from '../dom/selector-engine'\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1000000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n// Shoutout AngusCroll (https://goo.gl/pxwQGp)\nconst toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttr = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttr || (!hrefAttr.includes('#') && !hrefAttr.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n      hrefAttr = `#${hrefAttr.split('#')[1]}`\n    }\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\n  }\n\n  return selector\n}\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element)\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null\n  }\n\n  return null\n}\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element)\n\n  return selector ? document.querySelector(selector) : null\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = obj => {\n  if (!obj || typeof obj !== 'object') {\n    return false\n  }\n\n  if (typeof obj.jquery !== 'undefined') {\n    obj = obj[0]\n  }\n\n  return typeof obj.nodeType !== 'undefined'\n}\n\nconst getElement = obj => {\n  if (isElement(obj)) { // it's a jQuery object or a node element\n    return obj.jquery ? obj[0] : obj\n  }\n\n  if (typeof obj === 'string' && obj.length > 0) {\n    return SelectorEngine.findOne(obj)\n  }\n\n  return null\n}\n\nconst typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes).forEach(property => {\n    const expectedTypes = configTypes[property]\n    const value = config[property]\n    const valueType = value && isElement(value) ? 'element' : toType(value)\n\n    if (!new RegExp(expectedTypes).test(valueType)) {\n      throw new TypeError(\n        `${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n      )\n    }\n  })\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  return getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => {}\n\nconst reflow = element => element.offsetHeight\n\nconst getjQuery = () => {\n  const { jQuery } = window\n\n  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return jQuery\n  }\n\n  return null\n}\n\nconst DOMContentLoadedCallbacks = []\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        DOMContentLoadedCallbacks.forEach(callback => callback())\n      })\n    }\n\n    DOMContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\nconst isRTL = () => document.documentElement.dir === 'rtl'\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery()\n    /* istanbul ignore if */\n    if ($) {\n      const name = plugin.NAME\n      const JQUERY_NO_CONFLICT = $.fn[name]\n      $.fn[name] = plugin.jQueryInterface\n      $.fn[name].Constructor = plugin\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT\n        return plugin.jQueryInterface\n      }\n    }\n  })\n}\n\nconst execute = callback => {\n  if (typeof callback === 'function') {\n    callback()\n  }\n}\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback)\n    return\n  }\n\n  const durationPadding = 5\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding\n\n  let called = false\n\n  const handler = ({ target }) => {\n    if (target !== transitionElement) {\n      return\n    }\n\n    called = true\n    transitionElement.removeEventListener(TRANSITION_END, handler)\n    execute(callback)\n  }\n\n  transitionElement.addEventListener(TRANSITION_END, handler)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement)\n    }\n  }, emulatedDuration)\n}\n\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  let index = list.indexOf(activeElement)\n\n  // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n  if (index === -1) {\n    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0]\n  }\n\n  const listLength = list.length\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport {\n  getElement,\n  getUID,\n  getSelectorFromElement,\n  getElementFromSelector,\n  getTransitionDurationFromElement,\n  triggerTransitionEnd,\n  isElement,\n  typeCheckConfig,\n  isVisible,\n  isDisabled,\n  findShadowRoot,\n  noop,\n  getNextActiveElement,\n  reflow,\n  getjQuery,\n  onDOMContentLoaded,\n  isRTL,\n  defineJQueryPlugin,\n  execute,\n  executeAfterTransition\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getjQuery } from '../util/index'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/\nconst stripNameRegex = /\\..*/\nconst stripUidRegex = /::\\d+$/\nconst eventRegistry = {} // Events storage\nlet uidEvent = 1\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n}\nconst customEventsRegex = /^(mouseenter|mouseleave)/i\nconst nativeEvents = new Set([\n  'click',\n  'dblclick',\n  'mouseup',\n  'mousedown',\n  'contextmenu',\n  'mousewheel',\n  'DOMMouseScroll',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'selectstart',\n  'selectend',\n  'keydown',\n  'keypress',\n  'keyup',\n  'orientationchange',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel',\n  'gesturestart',\n  'gesturechange',\n  'gestureend',\n  'focus',\n  'blur',\n  'change',\n  'reset',\n  'select',\n  'submit',\n  'focusin',\n  'focusout',\n  'load',\n  'unload',\n  'beforeunload',\n  'resize',\n  'move',\n  'DOMContentLoaded',\n  'readystatechange',\n  'error',\n  'abort',\n  'scroll'\n])\n\n/**\n * ------------------------------------------------------------------------\n * Private methods\n * ------------------------------------------------------------------------\n */\n\nfunction getUidEvent(element, uid) {\n  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n}\n\nfunction getEvent(element) {\n  const uid = getUidEvent(element)\n\n  element.uidEvent = uid\n  eventRegistry[uid] = eventRegistry[uid] || {}\n\n  return eventRegistry[uid]\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    event.delegateTarget = element\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn)\n    }\n\n    return fn.apply(element, [event])\n  }\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector)\n\n    for (let { target } = event; target && target !== this; target = target.parentNode) {\n      for (let i = domElements.length; i--;) {\n        if (domElements[i] === target) {\n          event.delegateTarget = target\n\n          if (handler.oneOff) {\n            // eslint-disable-next-line unicorn/consistent-destructuring\n            EventHandler.off(element, event.type, selector, fn)\n          }\n\n          return fn.apply(target, [event])\n        }\n      }\n    }\n\n    // To please ESLint\n    return null\n  }\n}\n\nfunction findHandler(events, handler, delegationSelector = null) {\n  const uidEventList = Object.keys(events)\n\n  for (let i = 0, len = uidEventList.length; i < len; i++) {\n    const event = events[uidEventList[i]]\n\n    if (event.originalHandler === handler && event.delegationSelector === delegationSelector) {\n      return event\n    }\n  }\n\n  return null\n}\n\nfunction normalizeParams(originalTypeEvent, handler, delegationFn) {\n  const delegation = typeof handler === 'string'\n  const originalHandler = delegation ? delegationFn : handler\n\n  let typeEvent = getTypeEvent(originalTypeEvent)\n  const isNative = nativeEvents.has(typeEvent)\n\n  if (!isNative) {\n    typeEvent = originalTypeEvent\n  }\n\n  return [delegation, originalHandler, typeEvent]\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFn, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return\n  }\n\n  if (!handler) {\n    handler = delegationFn\n    delegationFn = null\n  }\n\n  // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n  if (customEventsRegex.test(originalTypeEvent)) {\n    const wrapFn = fn => {\n      return function (event) {\n        if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {\n          return fn.call(this, event)\n        }\n      }\n    }\n\n    if (delegationFn) {\n      delegationFn = wrapFn(delegationFn)\n    } else {\n      handler = wrapFn(handler)\n    }\n  }\n\n  const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn)\n  const events = getEvent(element)\n  const handlers = events[typeEvent] || (events[typeEvent] = {})\n  const previousFn = findHandler(handlers, originalHandler, delegation ? handler : null)\n\n  if (previousFn) {\n    previousFn.oneOff = previousFn.oneOff && oneOff\n\n    return\n  }\n\n  const uid = getUidEvent(originalHandler, originalTypeEvent.replace(namespaceRegex, ''))\n  const fn = delegation ?\n    bootstrapDelegationHandler(element, handler, delegationFn) :\n    bootstrapHandler(element, handler)\n\n  fn.delegationSelector = delegation ? handler : null\n  fn.originalHandler = originalHandler\n  fn.oneOff = oneOff\n  fn.uidEvent = uid\n  handlers[uid] = fn\n\n  element.addEventListener(typeEvent, fn, delegation)\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector)\n\n  if (!fn) {\n    return\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n  delete events[typeEvent][fn.uidEvent]\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {}\n\n  Object.keys(storeElementEvent).forEach(handlerKey => {\n    if (handlerKey.includes(namespace)) {\n      const event = storeElementEvent[handlerKey]\n\n      removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)\n    }\n  })\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '')\n  return customEvents[event] || event\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFn) {\n    addHandler(element, event, handler, delegationFn, false)\n  },\n\n  one(element, event, handler, delegationFn) {\n    addHandler(element, event, handler, delegationFn, true)\n  },\n\n  off(element, originalTypeEvent, handler, delegationFn) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return\n    }\n\n    const [delegation, originalHandler, typeEvent] = normalizeParams(originalTypeEvent, handler, delegationFn)\n    const inNamespace = typeEvent !== originalTypeEvent\n    const events = getEvent(element)\n    const isNamespace = originalTypeEvent.startsWith('.')\n\n    if (typeof originalHandler !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!events || !events[typeEvent]) {\n        return\n      }\n\n      removeHandler(element, events, typeEvent, originalHandler, delegation ? handler : null)\n      return\n    }\n\n    if (isNamespace) {\n      Object.keys(events).forEach(elementEvent => {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n      })\n    }\n\n    const storeElementEvent = events[typeEvent] || {}\n    Object.keys(storeElementEvent).forEach(keyHandlers => {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '')\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        const event = storeElementEvent[keyHandlers]\n\n        removeHandler(element, events, typeEvent, event.originalHandler, event.delegationSelector)\n      }\n    })\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null\n    }\n\n    const $ = getjQuery()\n    const typeEvent = getTypeEvent(event)\n    const inNamespace = event !== typeEvent\n    const isNative = nativeEvents.has(typeEvent)\n\n    let jQueryEvent\n    let bubbles = true\n    let nativeDispatch = true\n    let defaultPrevented = false\n    let evt = null\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args)\n\n      $(element).trigger(jQueryEvent)\n      bubbles = !jQueryEvent.isPropagationStopped()\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n      defaultPrevented = jQueryEvent.isDefaultPrevented()\n    }\n\n    if (isNative) {\n      evt = document.createEvent('HTMLEvents')\n      evt.initEvent(typeEvent, bubbles, true)\n    } else {\n      evt = new CustomEvent(event, {\n        bubbles,\n        cancelable: true\n      })\n    }\n\n    // merge custom information in our event\n    if (typeof args !== 'undefined') {\n      Object.keys(args).forEach(key => {\n        Object.defineProperty(evt, key, {\n          get() {\n            return args[key]\n          }\n        })\n      })\n    }\n\n    if (defaultPrevented) {\n      evt.preventDefault()\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt)\n    }\n\n    if (evt.defaultPrevented && typeof jQueryEvent !== 'undefined') {\n      jQueryEvent.preventDefault()\n    }\n\n    return evt\n  }\n}\n\nexport default EventHandler\n"]},"metadata":{},"sourceType":"script"}