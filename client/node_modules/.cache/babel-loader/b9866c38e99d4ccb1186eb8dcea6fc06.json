{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KYM\\\\Desktop\\\\calorie\\\\client\\\\src\\\\components\\\\my-foods\\\\EditFood.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport ActionModal from 'src/components/modals/ActionModal';\nimport TextInput from 'src/components/forms/TextInput';\nimport FileInput from 'src/components/forms/FileInput';\nimport AsyncButton from 'src/components/buttons/AsyncButton';\nimport CheckBox from 'src/components/forms/CheckBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditFood = ({\n  modalRef,\n  target,\n  handleClose,\n  handleGetFoods\n}) => {\n  _s();\n\n  // We use the ref so we can reset the value of the file input since it is not a controlled component\n  const imageInputRef = useRef(); // We use this ref so we can clear the success message's timeout on component unmounting\n\n  const messageTimerRef = useRef(null);\n  const [state, setState] = useState({\n    name: target.name,\n    caloriesPerPortion: target.caloriesPerPortion,\n    replaceCurrentImage: false,\n    image: null,\n    loading: false,\n    errors: [],\n    successMessage: ''\n  });\n  useEffect(() => {\n    // Clearning the timeout\n    return () => {\n      if (messageTimerRef.current) {\n        clearTimeout(messageTimerRef.current);\n      }\n    };\n  }, []);\n\n  const handleOnChange = e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleCheck = async e => {\n    setState(prevState => ({ ...prevState,\n      [e.target.name]: e.target.checked\n    }));\n  };\n\n  const handleSetImage = image => {\n    setState({ ...state,\n      image\n    });\n  };\n\n  const handleEmptyImage = () => {\n    imageInputRef.current.value = '';\n    setState({ ...state,\n      image: null\n    });\n  };\n\n  const handleEditFood = async e => {\n    e.preventDefault();\n    setState({ ...state,\n      loading: true,\n      errors: []\n    });\n    const {\n      name,\n      caloriesPerPortion,\n      image,\n      replaceCurrentImage\n    } = state; // Creating a FormData object so we can append the image file to it\n\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('caloriesPerPortion', caloriesPerPortion);\n\n    if (replaceCurrentImage) {\n      formData.append('replaceCurrentImage', replaceCurrentImage);\n    }\n\n    if (image) {\n      formData.append('image', image, image.name);\n    }\n\n    try {\n      const res = await axios.put(`foods/${target._id}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }); // We empty the the fields after a successfull add\n\n      setState(prevState => ({ ...prevState,\n        loading: false,\n        image: null,\n        // replaceCurrentImage: false,\n        successMessage: res.data\n      }));\n\n      if (imageInputRef.current) {\n        imageInputRef.current.value = '';\n      }\n\n      handleGetFoods(); // We also hide the success message after few seconds\n\n      messageTimerRef.current = setTimeout(() => {\n        setState(prevState => ({ ...prevState,\n          successMessage: ''\n        }));\n      }, 6 * 1000);\n    } catch (error) {\n      const {\n        response: {\n          data: {\n            errors\n          }\n        }\n      } = error;\n      setState(prevState => ({ ...prevState,\n        errors,\n        loading: false\n      }));\n    }\n  };\n\n  const {\n    name,\n    caloriesPerPortion,\n    replaceCurrentImage,\n    image,\n    loading,\n    successMessage,\n    errors\n  } = state;\n  return /*#__PURE__*/_jsxDEV(ActionModal, {\n    modalRef: modalRef,\n    title: \"Edit Food\",\n    handleClose: handleClose,\n    actions: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"primary-button btn-lg rounded-pill ms-0 ms-sm-4\",\n        type: \"button\",\n        disabled: !image || !replaceCurrentImage,\n        onClick: handleEmptyImage,\n        children: \"Empty Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AsyncButton, {\n        type: \"submit\",\n        text: \"Edit\",\n        className: \"primary-button btn-lg rounded-pill ms-0 ms-sm-4\",\n        loading: loading,\n        disabled: !name || !caloriesPerPortion,\n        form: \"add-food-form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true),\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"px-5\",\n      id: \"add-food-form\",\n      onSubmit: handleEditFood,\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"name\",\n        value: name,\n        label: \"Name*\",\n        type: \"text\",\n        required: true,\n        min: 1,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"caloriesPerPortion\",\n        value: caloriesPerPortion,\n        label: \"Calories per portion*\",\n        type: \"number\",\n        required: true,\n        min: 1,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 mb-2 text-start\",\n        children: /*#__PURE__*/_jsxDEV(CheckBox, {\n          name: \"replaceCurrentImage\",\n          text: \"Replace current image\",\n          checked: replaceCurrentImage,\n          onChange: handleCheck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), replaceCurrentImage && /*#__PURE__*/_jsxDEV(FileInput, {\n        name: \"image\",\n        label: \"Upload an image\",\n        handleChange: handleSetImage,\n        reference: imageInputRef,\n        errors: errors,\n        accept: \"image/png, image/jpg, image/jpeg\",\n        disabled: !replaceCurrentImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditFood, \"lGljXW77LD1B6CwVC3qIzp4/5qo=\");\n\n_c = EditFood;\nEditFood.propTypes = {\n  modalRef: PropTypes.object.isRequired,\n  target: PropTypes.object.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  handleGetFoods: PropTypes.func.isRequired\n};\nexport default EditFood;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditFood\");","map":{"version":3,"sources":["C:/Users/KYM/Desktop/calorie/client/src/components/my-foods/EditFood.js"],"names":["React","useState","useRef","useEffect","PropTypes","axios","ActionModal","TextInput","FileInput","AsyncButton","CheckBox","EditFood","modalRef","target","handleClose","handleGetFoods","imageInputRef","messageTimerRef","state","setState","name","caloriesPerPortion","replaceCurrentImage","image","loading","errors","successMessage","current","clearTimeout","handleOnChange","e","value","handleCheck","prevState","checked","handleSetImage","handleEmptyImage","handleEditFood","preventDefault","formData","FormData","append","res","put","_id","headers","data","setTimeout","error","response","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nimport ActionModal from 'src/components/modals/ActionModal';\r\nimport TextInput from 'src/components/forms/TextInput';\r\nimport FileInput from 'src/components/forms/FileInput';\r\nimport AsyncButton from 'src/components/buttons/AsyncButton';\r\nimport CheckBox from 'src/components/forms/CheckBox';\r\n\r\nconst EditFood = ({ modalRef, target, handleClose, handleGetFoods }) => {\r\n  // We use the ref so we can reset the value of the file input since it is not a controlled component\r\n  const imageInputRef = useRef();\r\n\r\n  // We use this ref so we can clear the success message's timeout on component unmounting\r\n  const messageTimerRef = useRef(null);\r\n\r\n  const [state, setState] = useState({\r\n    name: target.name,\r\n    caloriesPerPortion: target.caloriesPerPortion,\r\n    replaceCurrentImage: false,\r\n    image: null,\r\n    loading: false,\r\n    errors: [],\r\n    successMessage: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Clearning the timeout\r\n    return () => {\r\n      if (messageTimerRef.current) {\r\n        clearTimeout(messageTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleOnChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleCheck = async (e) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      [e.target.name]: e.target.checked,\r\n    }));\r\n  };\r\n\r\n  const handleSetImage = (image) => {\r\n    setState({ ...state, image });\r\n  };\r\n\r\n  const handleEmptyImage = () => {\r\n    imageInputRef.current.value = '';\r\n    setState({ ...state, image: null });\r\n  };\r\n\r\n  const handleEditFood = async (e) => {\r\n    e.preventDefault();\r\n    setState({ ...state, loading: true, errors: [] });\r\n    const { name, caloriesPerPortion, image, replaceCurrentImage } = state;\r\n\r\n    // Creating a FormData object so we can append the image file to it\r\n    const formData = new FormData();\r\n\r\n    formData.append('name', name);\r\n    formData.append('caloriesPerPortion', caloriesPerPortion);\r\n    if (replaceCurrentImage) {\r\n      formData.append('replaceCurrentImage', replaceCurrentImage);\r\n    }\r\n    if (image) {\r\n      formData.append('image', image, image.name);\r\n    }\r\n\r\n    try {\r\n      const res = await axios.put(`foods/${target._id}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      // We empty the the fields after a successfull add\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        loading: false,\r\n        image: null,\r\n        // replaceCurrentImage: false,\r\n        successMessage: res.data,\r\n      }));\r\n\r\n      if (imageInputRef.current) {\r\n        imageInputRef.current.value = '';\r\n      }\r\n\r\n      handleGetFoods();\r\n\r\n      // We also hide the success message after few seconds\r\n      messageTimerRef.current = setTimeout(() => {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          successMessage: '',\r\n        }));\r\n      }, 6 * 1000);\r\n    } catch (error) {\r\n      const {\r\n        response: {\r\n          data: { errors },\r\n        },\r\n      } = error;\r\n      setState((prevState) => ({ ...prevState, errors, loading: false }));\r\n    }\r\n  };\r\n\r\n  const {\r\n    name,\r\n    caloriesPerPortion,\r\n    replaceCurrentImage,\r\n    image,\r\n    loading,\r\n    successMessage,\r\n    errors,\r\n  } = state;\r\n\r\n  return (\r\n    <ActionModal\r\n      modalRef={modalRef}\r\n      title=\"Edit Food\"\r\n      handleClose={handleClose}\r\n      actions={\r\n        <>\r\n          <button\r\n            className=\"primary-button btn-lg rounded-pill ms-0 ms-sm-4\"\r\n            type=\"button\"\r\n            disabled={!image || !replaceCurrentImage}\r\n            onClick={handleEmptyImage}\r\n          >\r\n            Empty Image\r\n          </button>\r\n          <AsyncButton\r\n            type=\"submit\"\r\n            text=\"Edit\"\r\n            className=\"primary-button btn-lg rounded-pill ms-0 ms-sm-4\"\r\n            loading={loading}\r\n            disabled={!name || !caloriesPerPortion}\r\n            form=\"add-food-form\"\r\n          />\r\n        </>\r\n      }\r\n    >\r\n      <form className=\"px-5\" id=\"add-food-form\" onSubmit={handleEditFood}>\r\n        <TextInput\r\n          name=\"name\"\r\n          value={name}\r\n          label=\"Name*\"\r\n          type=\"text\"\r\n          required\r\n          min={1}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n        <TextInput\r\n          name=\"caloriesPerPortion\"\r\n          value={caloriesPerPortion}\r\n          label=\"Calories per portion*\"\r\n          type=\"number\"\r\n          required\r\n          min={1}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n\r\n        <div className=\"mt-4 mb-2 text-start\">\r\n          <CheckBox\r\n            name=\"replaceCurrentImage\"\r\n            text=\"Replace current image\"\r\n            checked={replaceCurrentImage}\r\n            onChange={handleCheck}\r\n          />\r\n        </div>\r\n\r\n        {replaceCurrentImage && (\r\n          <FileInput\r\n            name=\"image\"\r\n            label=\"Upload an image\"\r\n            handleChange={handleSetImage}\r\n            reference={imageInputRef}\r\n            errors={errors}\r\n            accept=\"image/png, image/jpg, image/jpeg\"\r\n            disabled={!replaceCurrentImage}\r\n          />\r\n        )}\r\n        {successMessage && (\r\n          <div className=\"alert alert-success\" role=\"alert\">\r\n            {successMessage}\r\n          </div>\r\n        )}\r\n      </form>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nEditFood.propTypes = {\r\n  modalRef: PropTypes.object.isRequired,\r\n  target: PropTypes.object.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  handleGetFoods: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EditFood;\r\n"]},"metadata":{},"sourceType":"module"}