{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nimport { GET_CONSUMPTION_LIST, UPDATE_CONSUMPTION_QUANTITY, UPDATE_CONSUMPTION_CALORIES, ADD_CONSUMPTION, DELETE_CONSUMPTION, CLEAR_CONSUMPTIONS, SAVE_CONSUMPTION_LIST, SET_CONSUMPTIONS_LOADING, SET_SAVING_LOADING } from '../actions/types';\nconst initialState = {\n  consumptionList: [],\n  totalCalories: 0,\n  loading: true,\n  saved: true,\n  saving: false\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_CONSUMPTION_LIST:\n      {\n        return { ...state,\n          consumptionList: payload,\n          loading: false,\n          totalCalories: getTotalCalories(payload)\n        };\n      }\n\n    case ADD_CONSUMPTION:\n      return { ...state,\n        consumptionList: [{ ...payload,\n          id: uuidv4(),\n          quantity: 1,\n          calories: payload.caloriesPerPortion\n        }, ...state.consumptionList],\n        totalCalories: state.totalCalories + payload.caloriesPerPortion,\n        saved: false\n      };\n\n    case UPDATE_CONSUMPTION_QUANTITY:\n      {\n        let consumptionList = state.consumptionList;\n        const index = consumptionList.findIndex(consumption => consumption.id == payload.id);\n        consumptionList[index].quantity = payload.quantity;\n        consumptionList[index].calories = Math.round(payload.quantity * consumptionList[index].caloriesPerPortion);\n        return { ...state,\n          consumptionList: [...consumptionList],\n          totalCalories: getTotalCalories(consumptionList),\n          saved: false\n        };\n      }\n\n    case UPDATE_CONSUMPTION_CALORIES:\n      {\n        let consumptionList = state.consumptionList;\n        const index = consumptionList.findIndex(consumption => consumption.id == payload.id);\n        consumptionList[index].calories = payload.calories;\n        consumptionList[index].quantity = Number(payload.calories / consumptionList[index].caloriesPerPortion).toFixed(2);\n        return { ...state,\n          consumptionList: [...consumptionList],\n          totalCalories: getTotalCalories(consumptionList),\n          saved: false\n        };\n      }\n\n    case DELETE_CONSUMPTION:\n      {\n        const deletedConsumption = state.consumptionList.find(consumption => consumption.id === payload.id);\n        return { ...state,\n          consumptionList: [...state.consumptionList.filter(consumption => consumption.id !== payload.id)],\n          totalCalories: state.totalCalories - deletedConsumption.calories,\n          saved: false\n        };\n      }\n\n    case CLEAR_CONSUMPTIONS:\n      {\n        return { ...state,\n          consumptionList: [],\n          totalCalories: 0,\n          saved: false\n        };\n      }\n\n    case SAVE_CONSUMPTION_LIST:\n      {\n        return { ...state,\n          saved: true,\n          saving: false\n        };\n      }\n\n    case SET_SAVING_LOADING:\n      {\n        return { ...state,\n          saving: true\n        };\n      }\n\n    case SET_CONSUMPTIONS_LOADING:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst getTotalCalories = consumptionList => {\n  let totalCalories = 0;\n  consumptionList.forEach(consumption => {\n    totalCalories += Number(consumption.calories);\n    return;\n  });\n  return totalCalories;\n};","map":{"version":3,"sources":["C:/Users/KYM/Desktop/calorie/client/src/reducers/consumptionList.js"],"names":["v4","uuidv4","GET_CONSUMPTION_LIST","UPDATE_CONSUMPTION_QUANTITY","UPDATE_CONSUMPTION_CALORIES","ADD_CONSUMPTION","DELETE_CONSUMPTION","CLEAR_CONSUMPTIONS","SAVE_CONSUMPTION_LIST","SET_CONSUMPTIONS_LOADING","SET_SAVING_LOADING","initialState","consumptionList","totalCalories","loading","saved","saving","state","action","type","payload","getTotalCalories","id","quantity","calories","caloriesPerPortion","index","findIndex","consumption","Math","round","Number","toFixed","deletedConsumption","find","filter","forEach"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  GET_CONSUMPTION_LIST,\r\n  UPDATE_CONSUMPTION_QUANTITY,\r\n  UPDATE_CONSUMPTION_CALORIES,\r\n  ADD_CONSUMPTION,\r\n  DELETE_CONSUMPTION,\r\n  CLEAR_CONSUMPTIONS,\r\n  SAVE_CONSUMPTION_LIST,\r\n  SET_CONSUMPTIONS_LOADING,\r\n  SET_SAVING_LOADING,\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  consumptionList: [],\r\n  totalCalories: 0,\r\n  loading: true,\r\n  saved: true,\r\n  saving: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_CONSUMPTION_LIST: {\r\n      return {\r\n        ...state,\r\n        consumptionList: payload,\r\n        loading: false,\r\n        totalCalories: getTotalCalories(payload),\r\n      };\r\n    }\r\n    case ADD_CONSUMPTION:\r\n      return {\r\n        ...state,\r\n        consumptionList: [\r\n          {\r\n            ...payload,\r\n            id: uuidv4(),\r\n            quantity: 1,\r\n            calories: payload.caloriesPerPortion,\r\n          },\r\n          ...state.consumptionList,\r\n        ],\r\n        totalCalories: state.totalCalories + payload.caloriesPerPortion,\r\n        saved: false,\r\n      };\r\n    case UPDATE_CONSUMPTION_QUANTITY: {\r\n      let consumptionList = state.consumptionList;\r\n      const index = consumptionList.findIndex(\r\n        (consumption) => consumption.id == payload.id\r\n      );\r\n\r\n      consumptionList[index].quantity = payload.quantity;\r\n\r\n      consumptionList[index].calories = Math.round(\r\n        payload.quantity * consumptionList[index].caloriesPerPortion\r\n      );\r\n      return {\r\n        ...state,\r\n        consumptionList: [...consumptionList],\r\n        totalCalories: getTotalCalories(consumptionList),\r\n        saved: false,\r\n      };\r\n    }\r\n    case UPDATE_CONSUMPTION_CALORIES: {\r\n      let consumptionList = state.consumptionList;\r\n      const index = consumptionList.findIndex(\r\n        (consumption) => consumption.id == payload.id\r\n      );\r\n\r\n      consumptionList[index].calories = payload.calories;\r\n\r\n      consumptionList[index].quantity = Number(\r\n        payload.calories / consumptionList[index].caloriesPerPortion\r\n      ).toFixed(2);\r\n      return {\r\n        ...state,\r\n        consumptionList: [...consumptionList],\r\n        totalCalories: getTotalCalories(consumptionList),\r\n        saved: false,\r\n      };\r\n    }\r\n    case DELETE_CONSUMPTION: {\r\n      const deletedConsumption = state.consumptionList.find(\r\n        (consumption) => consumption.id === payload.id\r\n      );\r\n      return {\r\n        ...state,\r\n        consumptionList: [\r\n          ...state.consumptionList.filter(\r\n            (consumption) => consumption.id !== payload.id\r\n          ),\r\n        ],\r\n        totalCalories: state.totalCalories - deletedConsumption.calories,\r\n        saved: false,\r\n      };\r\n    }\r\n    case CLEAR_CONSUMPTIONS: {\r\n      return {\r\n        ...state,\r\n        consumptionList: [],\r\n        totalCalories: 0,\r\n        saved: false,\r\n      };\r\n    }\r\n    case SAVE_CONSUMPTION_LIST: {\r\n      return {\r\n        ...state,\r\n        saved: true,\r\n        saving: false,\r\n      };\r\n    }\r\n    case SET_SAVING_LOADING: {\r\n      return {\r\n        ...state,\r\n        saving: true,\r\n      };\r\n    }\r\n    case SET_CONSUMPTIONS_LOADING: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst getTotalCalories = (consumptionList) => {\r\n  let totalCalories = 0;\r\n  consumptionList.forEach((consumption) => {\r\n    totalCalories += Number(consumption.calories);\r\n    return;\r\n  });\r\n  return totalCalories;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}