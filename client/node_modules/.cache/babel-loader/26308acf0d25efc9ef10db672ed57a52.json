{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KYM\\\\Desktop\\\\calorie\\\\client\\\\src\\\\components\\\\forms\\\\FileInput.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileInput = ({\n  name,\n  className,\n  label,\n  errors,\n  handleChange,\n  reference,\n  ...rest\n}) => {\n  const error = errors.find(error => error.param === name);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-start\",\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      className: \"form-label mb-0 mt-1\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: `form-control mt-2${error ? ` is-invalid` : ''} ${className}`,\n      type: \"file\",\n      id: name,\n      onChange: e => handleChange(e.target.files[0]),\n      ref: reference,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-feedback\",\n      children: error === null || error === void 0 ? void 0 : error.msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FileInput;\nFileInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  label: PropTypes.string,\n  handleChange: PropTypes.func.isRequired,\n  reference: PropTypes.object,\n  // The reference is used so we can empty the file input value\n  errors: PropTypes.array,\n  rest: PropTypes.any\n};\nFileInput.defaultProps = {\n  className: '',\n  errors: []\n};\nexport default FileInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileInput\");","map":{"version":3,"sources":["C:/Users/KYM/Desktop/calorie/client/src/components/forms/FileInput.js"],"names":["React","PropTypes","FileInput","name","className","label","errors","handleChange","reference","rest","error","find","param","e","target","files","msg","propTypes","string","isRequired","func","object","array","any","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,IADiB;AAEjBC,EAAAA,SAFiB;AAGjBC,EAAAA,KAHiB;AAIjBC,EAAAA,MAJiB;AAKjBC,EAAAA,YALiB;AAMjBC,EAAAA,SANiB;AAOjB,KAAGC;AAPc,CAAD,KAQZ;AACJ,QAAMC,KAAK,GAAGJ,MAAM,CAACK,IAAP,CAAaD,KAAD,IAAWA,KAAK,CAACE,KAAN,KAAgBT,IAAvC,CAAd;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,eACGE,KAAK,iBACJ;AAAO,MAAA,OAAO,EAAEF,IAAhB;AAAsB,MAAA,SAAS,EAAC,sBAAhC;AAAA,gBACGE;AADH;AAAA;AAAA;AAAA;AAAA,YAFJ,eAME;AACE,MAAA,SAAS,EAAG,oBACVK,KAAK,GAAI,aAAJ,GAAmB,EACzB,IAAGN,SAAU,EAHhB;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,EAAE,EAAED,IALN;AAME,MAAA,QAAQ,EAAGU,CAAD,IAAON,YAAY,CAACM,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD,CAN/B;AAOE,MAAA,GAAG,EAAEP,SAPP;AAAA,SAQMC;AARN;AAAA;AAAA;AAAA;AAAA,YANF,eAgBE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,gBAAmCC,KAAnC,aAAmCA,KAAnC,uBAAmCA,KAAK,CAAEM;AAA1C;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA9BD;;KAAMd,S;AAgCNA,SAAS,CAACe,SAAV,GAAsB;AACpBd,EAAAA,IAAI,EAAEF,SAAS,CAACiB,MAAV,CAAiBC,UADH;AAEpBf,EAAAA,SAAS,EAAEH,SAAS,CAACiB,MAFD;AAGpBb,EAAAA,KAAK,EAAEJ,SAAS,CAACiB,MAHG;AAIpBX,EAAAA,YAAY,EAAEN,SAAS,CAACmB,IAAV,CAAeD,UAJT;AAKpBX,EAAAA,SAAS,EAAEP,SAAS,CAACoB,MALD;AAKS;AAC7Bf,EAAAA,MAAM,EAAEL,SAAS,CAACqB,KANE;AAOpBb,EAAAA,IAAI,EAAER,SAAS,CAACsB;AAPI,CAAtB;AAUArB,SAAS,CAACsB,YAAV,GAAyB;AACvBpB,EAAAA,SAAS,EAAE,EADY;AAEvBE,EAAAA,MAAM,EAAE;AAFe,CAAzB;AAKA,eAAeJ,SAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FileInput = ({\r\n  name,\r\n  className,\r\n  label,\r\n  errors,\r\n  handleChange,\r\n  reference,\r\n  ...rest\r\n}) => {\r\n  const error = errors.find((error) => error.param === name);\r\n  return (\r\n    <div className=\"text-start\">\r\n      {label && (\r\n        <label htmlFor={name} className=\"form-label mb-0 mt-1\">\r\n          {label}\r\n        </label>\r\n      )}\r\n      <input\r\n        className={`form-control mt-2${\r\n          error ? ` is-invalid` : ''\r\n        } ${className}`}\r\n        type=\"file\"\r\n        id={name}\r\n        onChange={(e) => handleChange(e.target.files[0])}\r\n        ref={reference}\r\n        {...rest}\r\n      />\r\n      <div className=\"invalid-feedback\">{error?.msg}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nFileInput.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  className: PropTypes.string,\r\n  label: PropTypes.string,\r\n  handleChange: PropTypes.func.isRequired,\r\n  reference: PropTypes.object, // The reference is used so we can empty the file input value\r\n  errors: PropTypes.array,\r\n  rest: PropTypes.any,\r\n};\r\n\r\nFileInput.defaultProps = {\r\n  className: '',\r\n  errors: [],\r\n};\r\n\r\nexport default FileInput;\r\n"]},"metadata":{},"sourceType":"module"}