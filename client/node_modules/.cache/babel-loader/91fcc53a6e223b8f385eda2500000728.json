{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KYM\\\\Desktop\\\\calorie\\\\client\\\\src\\\\pages\\\\Settings.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport axios from 'axios';\nimport { WEBSITE_NAME } from 'src/utils/brand';\nimport TextInput from 'src/components/forms/TextInput';\nimport AsyncButton from 'src/components/buttons/AsyncButton';\nimport { loadUser } from 'src/actions/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Settings = ({\n  user,\n  loadUser\n}) => {\n  _s();\n\n  // We use this ref so we can clear the success message's timeout on component unmounting\n  const messageTimerRef = useRef(null);\n  const [state, setState] = useState({\n    username: (user === null || user === void 0 ? void 0 : user.username) || '',\n    email: (user === null || user === void 0 ? void 0 : user.email) || '',\n    password: '',\n    confirmPassword: '',\n    oldPassword: '',\n    loading: false,\n    successMessage: '',\n    errors: []\n  });\n  useEffect(() => {\n    // Clearning the timeout\n    return () => {\n      if (messageTimerRef.current) {\n        clearTimeout(messageTimerRef.current);\n      }\n    };\n  }, []);\n\n  const handleOnChange = async e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSaveSettings = async e => {\n    e.preventDefault();\n    setState({ ...state,\n      successMessage: '',\n      errors: [],\n      loading: true\n    });\n    const {\n      username,\n      email,\n      password,\n      confirmPassword,\n      oldPassword\n    } = state;\n\n    if (password !== confirmPassword) {\n      setState(prevState => ({ ...prevState,\n        errors: [{\n          param: 'confirmPassword',\n          msg: 'Passwords do not match'\n        }],\n        loading: false\n      }));\n      return;\n    }\n\n    const formData = {\n      username,\n      email,\n      password,\n      oldPassword\n    };\n\n    try {\n      const res = await axios.put('auth/self', formData);\n      setState(prevState => ({ ...prevState,\n        successMessage: res.data,\n        loading: false\n      })); // We load the user so we get the updated data\n\n      loadUser(); // We also hide the success message after few seconds\n\n      messageTimerRef.current = setTimeout(() => {\n        setState(prevState => ({ ...prevState,\n          successMessage: ''\n        }));\n      }, 6 * 1000);\n    } catch (error) {\n      const {\n        response: {\n          data: {\n            errors\n          }\n        }\n      } = error;\n      setState(prevState => ({ ...prevState,\n        errors,\n        loading: false\n      }));\n    }\n  };\n\n  const {\n    username,\n    email,\n    password,\n    confirmPassword,\n    oldPassword,\n    loading,\n    successMessage,\n    errors\n  } = state;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: `${WEBSITE_NAME} - Settings`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-signin\",\n      onSubmit: handleSaveSettings,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"form-title h3 mb-5 font-weight-normal\",\n        children: \"Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"username\",\n        value: username,\n        label: \"Username\",\n        type: \"text\",\n        required: true,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"email\",\n        value: email,\n        label: \"Email*\",\n        type: \"email\",\n        required: true,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"If you do not want to change your password, leave it empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"oldPassword\",\n        value: oldPassword,\n        label: \"Old Password\",\n        type: \"password\",\n        required: confirmPassword || password,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"password\",\n        value: password,\n        label: \"New Password\",\n        type: \"password\",\n        required: confirmPassword || oldPassword,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"confirmPassword\",\n        value: confirmPassword,\n        label: \"Confirm Password\",\n        type: \"password\",\n        required: confirmPassword || password,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AsyncButton, {\n        type: \"submit\",\n        text: \"Save\",\n        className: \"primary-button btn-lg rounded-pill mt-4 py-2 px-4\",\n        loading: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Settings, \"9aJxYzHRm/StWzSv3k9SZWnbscY=\");\n\n_c = Settings;\n\nconst mapStateToProps = state => ({\n  user: state.auth.user\n});\n\nSettings.propTypes = {\n  user: PropTypes.object.isRequired,\n  loadUser: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  loadUser\n})(Settings);\n\nvar _c;\n\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"sources":["C:/Users/KYM/Desktop/calorie/client/src/pages/Settings.js"],"names":["React","useState","useRef","useEffect","PropTypes","connect","Helmet","axios","WEBSITE_NAME","TextInput","AsyncButton","loadUser","Settings","user","messageTimerRef","state","setState","username","email","password","confirmPassword","oldPassword","loading","successMessage","errors","current","clearTimeout","handleOnChange","e","target","name","value","handleSaveSettings","preventDefault","prevState","param","msg","formData","res","put","data","setTimeout","error","response","mapStateToProps","auth","propTypes","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport axios from 'axios';\r\n\r\nimport { WEBSITE_NAME } from 'src/utils/brand';\r\nimport TextInput from 'src/components/forms/TextInput';\r\n\r\nimport AsyncButton from 'src/components/buttons/AsyncButton';\r\nimport { loadUser } from 'src/actions/auth';\r\n\r\nconst Settings = ({ user, loadUser }) => {\r\n  // We use this ref so we can clear the success message's timeout on component unmounting\r\n  const messageTimerRef = useRef(null);\r\n\r\n  const [state, setState] = useState({\r\n    username: user?.username || '',\r\n    email: user?.email || '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    oldPassword: '',\r\n    loading: false,\r\n    successMessage: '',\r\n    errors: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Clearning the timeout\r\n    return () => {\r\n      if (messageTimerRef.current) {\r\n        clearTimeout(messageTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleOnChange = async (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSaveSettings = async (e) => {\r\n    e.preventDefault();\r\n    setState({ ...state, successMessage: '', errors: [], loading: true });\r\n\r\n    const { username, email, password, confirmPassword, oldPassword } = state;\r\n\r\n    if (password !== confirmPassword) {\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        errors: [{ param: 'confirmPassword', msg: 'Passwords do not match' }],\r\n        loading: false,\r\n      }));\r\n\r\n      return;\r\n    }\r\n\r\n    const formData = { username, email, password, oldPassword };\r\n\r\n    try {\r\n      const res = await axios.put('auth/self', formData);\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        successMessage: res.data,\r\n        loading: false,\r\n      }));\r\n\r\n      // We load the user so we get the updated data\r\n      loadUser();\r\n\r\n      // We also hide the success message after few seconds\r\n      messageTimerRef.current = setTimeout(() => {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          successMessage: '',\r\n        }));\r\n      }, 6 * 1000);\r\n    } catch (error) {\r\n      const {\r\n        response: {\r\n          data: { errors },\r\n        },\r\n      } = error;\r\n      setState((prevState) => ({ ...prevState, errors, loading: false }));\r\n    }\r\n  };\r\n\r\n  const {\r\n    username,\r\n    email,\r\n    password,\r\n    confirmPassword,\r\n    oldPassword,\r\n    loading,\r\n    successMessage,\r\n    errors,\r\n  } = state;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${WEBSITE_NAME} - Settings`}</title>\r\n      </Helmet>\r\n      <form className=\"form-signin\" onSubmit={handleSaveSettings}>\r\n        <h1 className=\"form-title h3 mb-5 font-weight-normal\">Settings</h1>\r\n        <TextInput\r\n          name=\"username\"\r\n          value={username}\r\n          label=\"Username\"\r\n          type=\"text\"\r\n          required\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n        <TextInput\r\n          name=\"email\"\r\n          value={email}\r\n          label=\"Email*\"\r\n          type=\"email\"\r\n          required\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n        <p>If you do not want to change your password, leave it empty</p>\r\n        <TextInput\r\n          name=\"oldPassword\"\r\n          value={oldPassword}\r\n          label=\"Old Password\"\r\n          type=\"password\"\r\n          required={confirmPassword || password}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n        <TextInput\r\n          name=\"password\"\r\n          value={password}\r\n          label=\"New Password\"\r\n          type=\"password\"\r\n          required={confirmPassword || oldPassword}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n        <TextInput\r\n          name=\"confirmPassword\"\r\n          value={confirmPassword}\r\n          label=\"Confirm Password\"\r\n          type=\"password\"\r\n          required={confirmPassword || password}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n\r\n        {successMessage && (\r\n          <div className=\"alert alert-success\" role=\"alert\">\r\n            {successMessage}\r\n          </div>\r\n        )}\r\n        <AsyncButton\r\n          type=\"submit\"\r\n          text=\"Save\"\r\n          className=\"primary-button btn-lg rounded-pill mt-4 py-2 px-4\"\r\n          loading={loading}\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.auth.user,\r\n});\r\n\r\nSettings.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n  loadUser: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, { loadUser })(Settings);\r\n"]},"metadata":{},"sourceType":"module"}