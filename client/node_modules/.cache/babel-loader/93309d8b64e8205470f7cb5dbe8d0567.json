{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\CalFit\\\\client\\\\src\\\\components\\\\my-foods\\\\AddFood.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport ActionModal from 'src/components/modals/ActionModal';\nimport TextInput from 'src/components/forms/TextInput';\nimport FileInput from 'src/components/forms/FileInput';\nimport AsyncButton from 'src/components/buttons/AsyncButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddFood = _ref => {\n  _s();\n\n  let {\n    modalRef,\n    handleClose,\n    handleGetFoods\n  } = _ref;\n  // We use the ref so we can reset the value of the file input since it is not a controlled component\n  const imageInputRef = useRef(); // We use this ref so we can clear the success message's timeout on component unmounting\n\n  const messageTimerRef = useRef(null);\n  const [state, setState] = useState({\n    name: '',\n    caloriesPerPortion: '',\n    image: null,\n    loading: false,\n    errors: [],\n    successMessage: ''\n  });\n  useEffect(() => {\n    // Clearning the timeout\n    return () => {\n      if (messageTimerRef.current) {\n        clearTimeout(messageTimerRef.current);\n      }\n    };\n  }, []);\n\n  const handleOnChange = e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSetImage = image => {\n    setState({ ...state,\n      image\n    });\n  };\n\n  const handleEmptyImage = () => {\n    imageInputRef.current.value = '';\n    setState({ ...state,\n      image: null\n    });\n  };\n\n  const handleAddFood = async e => {\n    e.preventDefault();\n    setState({ ...state,\n      loading: true,\n      errors: []\n    });\n    const {\n      name,\n      caloriesPerPortion,\n      image\n    } = state; // Creating a FormData object so we can append the image file to it\n\n    const formData = new FormData();\n    formData.append('name', name);\n    formData.append('caloriesPerPortion', caloriesPerPortion);\n\n    if (image) {\n      formData.append('image', image, image.name);\n    }\n\n    try {\n      const res = await axios.post('foods', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }); // We empty the the fields after a successfull add\n\n      setState(prevState => ({ ...prevState,\n        loading: false,\n        name: '',\n        caloriesPerPortion: '',\n        image: null,\n        successMessage: res.data\n      }));\n      imageInputRef.current.value = '';\n      handleGetFoods(); // We also hide the success message after few seconds\n\n      messageTimerRef.current = setTimeout(() => {\n        setState(prevState => ({ ...prevState,\n          successMessage: ''\n        }));\n      }, 6 * 1000);\n    } catch (error) {\n      const {\n        response: {\n          data: {\n            errors\n          }\n        }\n      } = error;\n      setState(prevState => ({ ...prevState,\n        errors,\n        loading: false\n      }));\n    }\n  };\n\n  const {\n    name,\n    caloriesPerPortion,\n    image,\n    loading,\n    successMessage,\n    errors\n  } = state;\n  return /*#__PURE__*/_jsxDEV(ActionModal, {\n    modalRef: modalRef,\n    title: \"Add Food\",\n    handleClose: handleClose,\n    actions: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"primary-button btn-lg rounded-pill ms-0 ms-sm-4\",\n        type: \"button\",\n        disabled: !image,\n        onClick: handleEmptyImage,\n        children: \"Empty Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AsyncButton, {\n        type: \"submit\",\n        text: \"Add\",\n        className: \"primary-button btn-lg rounded-pill ms-0 ms-sm-4\",\n        loading: loading,\n        disabled: !name || !caloriesPerPortion,\n        form: \"add-food-form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true),\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"px-5\",\n      id: \"add-food-form\",\n      onSubmit: handleAddFood,\n      children: [/*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"name\",\n        value: name,\n        label: \"Name*\",\n        type: \"text\",\n        required: true,\n        min: 1,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        name: \"caloriesPerPortion\",\n        value: caloriesPerPortion,\n        label: \"Calories per portion*\",\n        type: \"number\",\n        required: true,\n        min: 1,\n        errors: errors,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FileInput, {\n        name: \"image\",\n        label: \"Upload an image\",\n        handleChange: handleSetImage,\n        reference: imageInputRef,\n        errors: errors,\n        accept: \"image/png, image/jpg, image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        role: \"alert\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddFood, \"4TiMfGTpos/kjLEWDDVZ+znTzmM=\");\n\n_c = AddFood;\nAddFood.propTypes = {\n  modalRef: PropTypes.object.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  handleGetFoods: PropTypes.func.isRequired\n};\nexport default AddFood;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFood\");","map":{"version":3,"names":["React","useState","useRef","useEffect","PropTypes","axios","ActionModal","TextInput","FileInput","AsyncButton","AddFood","modalRef","handleClose","handleGetFoods","imageInputRef","messageTimerRef","state","setState","name","caloriesPerPortion","image","loading","errors","successMessage","current","clearTimeout","handleOnChange","e","target","value","handleSetImage","handleEmptyImage","handleAddFood","preventDefault","formData","FormData","append","res","post","headers","prevState","data","setTimeout","error","response","propTypes","object","isRequired","func"],"sources":["C:/Users/Admin/OneDrive/Desktop/CalFit/client/src/components/my-foods/AddFood.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nimport ActionModal from 'src/components/modals/ActionModal';\r\nimport TextInput from 'src/components/forms/TextInput';\r\nimport FileInput from 'src/components/forms/FileInput';\r\nimport AsyncButton from 'src/components/buttons/AsyncButton';\r\n\r\nconst AddFood = ({ modalRef, handleClose, handleGetFoods }) => {\r\n  // We use the ref so we can reset the value of the file input since it is not a controlled component\r\n  const imageInputRef = useRef();\r\n\r\n  // We use this ref so we can clear the success message's timeout on component unmounting\r\n  const messageTimerRef = useRef(null);\r\n\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    caloriesPerPortion: '',\r\n    image: null,\r\n    loading: false,\r\n    errors: [],\r\n    successMessage: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Clearning the timeout\r\n    return () => {\r\n      if (messageTimerRef.current) {\r\n        clearTimeout(messageTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleOnChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSetImage = (image) => {\r\n    setState({ ...state, image });\r\n  };\r\n\r\n  const handleEmptyImage = () => {\r\n    imageInputRef.current.value = '';\r\n    setState({ ...state, image: null });\r\n  };\r\n\r\n  const handleAddFood = async (e) => {\r\n    e.preventDefault();\r\n    setState({ ...state, loading: true, errors: [] });\r\n    const { name, caloriesPerPortion, image } = state;\r\n\r\n    // Creating a FormData object so we can append the image file to it\r\n    const formData = new FormData();\r\n\r\n    formData.append('name', name);\r\n    formData.append('caloriesPerPortion', caloriesPerPortion);\r\n    if (image) {\r\n      formData.append('image', image, image.name);\r\n    }\r\n\r\n    try {\r\n      const res = await axios.post('foods', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      // We empty the the fields after a successfull add\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        loading: false,\r\n        name: '',\r\n        caloriesPerPortion: '',\r\n        image: null,\r\n        successMessage: res.data,\r\n      }));\r\n      imageInputRef.current.value = '';\r\n\r\n      handleGetFoods();\r\n\r\n      // We also hide the success message after few seconds\r\n      messageTimerRef.current = setTimeout(() => {\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          successMessage: '',\r\n        }));\r\n      }, 6 * 1000);\r\n    } catch (error) {\r\n      const {\r\n        response: {\r\n          data: { errors },\r\n        },\r\n      } = error;\r\n      setState((prevState) => ({ ...prevState, errors, loading: false }));\r\n    }\r\n  };\r\n\r\n  const {\r\n    name,\r\n    caloriesPerPortion,\r\n    image,\r\n    loading,\r\n    successMessage,\r\n    errors,\r\n  } = state;\r\n\r\n  return (\r\n    <ActionModal\r\n      modalRef={modalRef}\r\n      title=\"Add Food\"\r\n      handleClose={handleClose}\r\n      actions={\r\n        <>\r\n          <button\r\n            className=\"primary-button btn-lg rounded-pill ms-0 ms-sm-4\"\r\n            type=\"button\"\r\n            disabled={!image}\r\n            onClick={handleEmptyImage}\r\n          >\r\n            Empty Image\r\n          </button>\r\n          <AsyncButton\r\n            type=\"submit\"\r\n            text=\"Add\"\r\n            className=\"primary-button btn-lg rounded-pill ms-0 ms-sm-4\"\r\n            loading={loading}\r\n            disabled={!name || !caloriesPerPortion}\r\n            form=\"add-food-form\"\r\n          />\r\n        </>\r\n      }\r\n    >\r\n      <form className=\"px-5\" id=\"add-food-form\" onSubmit={handleAddFood}>\r\n        <TextInput\r\n          name=\"name\"\r\n          value={name}\r\n          label=\"Name*\"\r\n          type=\"text\"\r\n          required\r\n          min={1}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n        <TextInput\r\n          name=\"caloriesPerPortion\"\r\n          value={caloriesPerPortion}\r\n          label=\"Calories per portion*\"\r\n          type=\"number\"\r\n          required\r\n          min={1}\r\n          errors={errors}\r\n          onChange={handleOnChange}\r\n        />\r\n\r\n        <FileInput\r\n          name=\"image\"\r\n          label=\"Upload an image\"\r\n          handleChange={handleSetImage}\r\n          reference={imageInputRef}\r\n          errors={errors}\r\n          accept=\"image/png, image/jpg, image/jpeg\"\r\n        />\r\n\r\n        {successMessage && (\r\n          <div className=\"alert alert-success\" role=\"alert\">\r\n            {successMessage}\r\n          </div>\r\n        )}\r\n      </form>\r\n    </ActionModal>\r\n  );\r\n};\r\n\r\nAddFood.propTypes = {\r\n  modalRef: PropTypes.object.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  handleGetFoods: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddFood;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}