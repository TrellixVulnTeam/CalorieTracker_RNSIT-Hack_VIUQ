{"ast":null,"code":"/*!\n  * Bootstrap base-component.js v5.0.2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./dom/data.js'), require('./dom/selector-engine.js'), require('./dom/event-handler.js')) : typeof define === 'function' && define.amd ? define(['./dom/data', './dom/selector-engine', './dom/event-handler'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Base = factory(global.Data, global.SelectorEngine, global.EventHandler));\n})(this, function (Data, SelectorEngine, EventHandler) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var Data__default = /*#__PURE__*/_interopDefaultLegacy(Data);\n\n  var SelectorEngine__default = /*#__PURE__*/_interopDefaultLegacy(SelectorEngine);\n\n  var EventHandler__default = /*#__PURE__*/_interopDefaultLegacy(EventHandler);\n\n  const MILLISECONDS_MULTIPLIER = 1000;\n  const TRANSITION_END = 'transitionend'; // Shoutout AngusCroll (https://goo.gl/pxwQGp)\n\n  const getTransitionDurationFromElement = element => {\n    if (!element) {\n      return 0;\n    } // Get transition-duration of the element\n\n\n    let {\n      transitionDuration,\n      transitionDelay\n    } = window.getComputedStyle(element);\n    const floatTransitionDuration = Number.parseFloat(transitionDuration);\n    const floatTransitionDelay = Number.parseFloat(transitionDelay); // Return 0 if element or transition duration is not found\n\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n      return 0;\n    } // If multiple durations are defined, take the first\n\n\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n  };\n\n  const triggerTransitionEnd = element => {\n    element.dispatchEvent(new Event(TRANSITION_END));\n  };\n\n  const isElement = obj => {\n    if (!obj || typeof obj !== 'object') {\n      return false;\n    }\n\n    if (typeof obj.jquery !== 'undefined') {\n      obj = obj[0];\n    }\n\n    return typeof obj.nodeType !== 'undefined';\n  };\n\n  const getElement = obj => {\n    if (isElement(obj)) {\n      // it's a jQuery object or a node element\n      return obj.jquery ? obj[0] : obj;\n    }\n\n    if (typeof obj === 'string' && obj.length > 0) {\n      return SelectorEngine__default['default'].findOne(obj);\n    }\n\n    return null;\n  };\n\n  const execute = callback => {\n    if (typeof callback === 'function') {\n      callback();\n    }\n  };\n\n  const executeAfterTransition = function (callback, transitionElement) {\n    let waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (!waitForTransition) {\n      execute(callback);\n      return;\n    }\n\n    const durationPadding = 5;\n    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n    let called = false;\n\n    const handler = _ref => {\n      let {\n        target\n      } = _ref;\n\n      if (target !== transitionElement) {\n        return;\n      }\n\n      called = true;\n      transitionElement.removeEventListener(TRANSITION_END, handler);\n      execute(callback);\n    };\n\n    transitionElement.addEventListener(TRANSITION_END, handler);\n    setTimeout(() => {\n      if (!called) {\n        triggerTransitionEnd(transitionElement);\n      }\n    }, emulatedDuration);\n  };\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.2): base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n\n  const VERSION = '5.0.2';\n\n  class BaseComponent {\n    constructor(element) {\n      element = getElement(element);\n\n      if (!element) {\n        return;\n      }\n\n      this._element = element;\n      Data__default['default'].set(this._element, this.constructor.DATA_KEY, this);\n    }\n\n    dispose() {\n      Data__default['default'].remove(this._element, this.constructor.DATA_KEY);\n      EventHandler__default['default'].off(this._element, this.constructor.EVENT_KEY);\n      Object.getOwnPropertyNames(this).forEach(propertyName => {\n        this[propertyName] = null;\n      });\n    }\n\n    _queueCallback(callback, element) {\n      let isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      executeAfterTransition(callback, element, isAnimated);\n    }\n    /** Static */\n\n\n    static getInstance(element) {\n      return Data__default['default'].get(element, this.DATA_KEY);\n    }\n\n    static getOrCreateInstance(element) {\n      let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n    }\n\n    static get VERSION() {\n      return VERSION;\n    }\n\n    static get NAME() {\n      throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n\n    static get DATA_KEY() {\n      return `bs.${this.NAME}`;\n    }\n\n    static get EVENT_KEY() {\n      return `.${this.DATA_KEY}`;\n    }\n\n  }\n\n  return BaseComponent;\n});","map":{"version":3,"sources":["../src/util/index.js","../src/base-component.js"],"names":["MILLISECONDS_MULTIPLIER","TRANSITION_END","getTransitionDurationFromElement","element","transitionDelay","window","floatTransitionDuration","Number","floatTransitionDelay","transitionDuration","triggerTransitionEnd","isElement","obj","getElement","SelectorEngine","execute","callback","executeAfterTransition","waitForTransition","durationPadding","emulatedDuration","called","handler","target","transitionElement","setTimeout","VERSION","constructor","Data","dispose","EventHandler","Object","propertyName","_queueCallback","isAnimated","getInstance","getOrCreateInstance","config","NAME","DATA_KEY","EVENT_KEY"],"mappings":"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","sourcesContent":["import SelectorEngine from '../dom/selector-engine'\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1000000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n// Shoutout AngusCroll (https://goo.gl/pxwQGp)\nconst toType = obj => {\n  if (obj === null || obj === undefined) {\n    return `${obj}`\n  }\n\n  return {}.toString.call(obj).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * --------------------------------------------------------------------------\n * Public Util Api\n * --------------------------------------------------------------------------\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttr = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttr || (!hrefAttr.includes('#') && !hrefAttr.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttr.includes('#') && !hrefAttr.startsWith('#')) {\n      hrefAttr = `#${hrefAttr.split('#')[1]}`\n    }\n\n    selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : null\n  }\n\n  return selector\n}\n\nconst getSelectorFromElement = element => {\n  const selector = getSelector(element)\n\n  if (selector) {\n    return document.querySelector(selector) ? selector : null\n  }\n\n  return null\n}\n\nconst getElementFromSelector = element => {\n  const selector = getSelector(element)\n\n  return selector ? document.querySelector(selector) : null\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = obj => {\n  if (!obj || typeof obj !== 'object') {\n    return false\n  }\n\n  if (typeof obj.jquery !== 'undefined') {\n    obj = obj[0]\n  }\n\n  return typeof obj.nodeType !== 'undefined'\n}\n\nconst getElement = obj => {\n  if (isElement(obj)) { // it's a jQuery object or a node element\n    return obj.jquery ? obj[0] : obj\n  }\n\n  if (typeof obj === 'string' && obj.length > 0) {\n    return SelectorEngine.findOne(obj)\n  }\n\n  return null\n}\n\nconst typeCheckConfig = (componentName, config, configTypes) => {\n  Object.keys(configTypes).forEach(property => {\n    const expectedTypes = configTypes[property]\n    const value = config[property]\n    const valueType = value && isElement(value) ? 'element' : toType(value)\n\n    if (!new RegExp(expectedTypes).test(valueType)) {\n      throw new TypeError(\n        `${componentName.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n      )\n    }\n  })\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  return getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => {}\n\nconst reflow = element => element.offsetHeight\n\nconst getjQuery = () => {\n  const { jQuery } = window\n\n  if (jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return jQuery\n  }\n\n  return null\n}\n\nconst DOMContentLoadedCallbacks = []\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        DOMContentLoadedCallbacks.forEach(callback => callback())\n      })\n    }\n\n    DOMContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\nconst isRTL = () => document.documentElement.dir === 'rtl'\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery()\n    /* istanbul ignore if */\n    if ($) {\n      const name = plugin.NAME\n      const JQUERY_NO_CONFLICT = $.fn[name]\n      $.fn[name] = plugin.jQueryInterface\n      $.fn[name].Constructor = plugin\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT\n        return plugin.jQueryInterface\n      }\n    }\n  })\n}\n\nconst execute = callback => {\n  if (typeof callback === 'function') {\n    callback()\n  }\n}\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback)\n    return\n  }\n\n  const durationPadding = 5\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding\n\n  let called = false\n\n  const handler = ({ target }) => {\n    if (target !== transitionElement) {\n      return\n    }\n\n    called = true\n    transitionElement.removeEventListener(TRANSITION_END, handler)\n    execute(callback)\n  }\n\n  transitionElement.addEventListener(TRANSITION_END, handler)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement)\n    }\n  }, emulatedDuration)\n}\n\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  let index = list.indexOf(activeElement)\n\n  // if the element does not exist in the list return an element depending on the direction and if cycle is allowed\n  if (index === -1) {\n    return list[!shouldGetNext && isCycleAllowed ? list.length - 1 : 0]\n  }\n\n  const listLength = list.length\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport {\n  getElement,\n  getUID,\n  getSelectorFromElement,\n  getElementFromSelector,\n  getTransitionDurationFromElement,\n  triggerTransitionEnd,\n  isElement,\n  typeCheckConfig,\n  isVisible,\n  isDisabled,\n  findShadowRoot,\n  noop,\n  getNextActiveElement,\n  reflow,\n  getjQuery,\n  onDOMContentLoaded,\n  isRTL,\n  defineJQueryPlugin,\n  execute,\n  executeAfterTransition\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Data from './dom/data'\nimport {\n  executeAfterTransition,\n  getElement\n} from './util/index'\nimport EventHandler from './dom/event-handler'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst VERSION = '5.0.2'\n\nclass BaseComponent {\n  constructor(element) {\n    element = getElement(element)\n\n    if (!element) {\n      return\n    }\n\n    this._element = element\n    Data.set(this._element, this.constructor.DATA_KEY, this)\n  }\n\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY)\n    EventHandler.off(this._element, this.constructor.EVENT_KEY)\n\n    Object.getOwnPropertyNames(this).forEach(propertyName => {\n      this[propertyName] = null\n    })\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated)\n  }\n\n  /** Static */\n\n  static getInstance(element) {\n    return Data.get(element, this.DATA_KEY)\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)\n  }\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`\n  }\n}\n\nexport default BaseComponent\n"]},"metadata":{},"sourceType":"script"}