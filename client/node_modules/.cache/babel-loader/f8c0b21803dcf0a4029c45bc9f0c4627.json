{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KYM\\\\Desktop\\\\calorie\\\\client\\\\src\\\\components\\\\forms\\\\TextInput.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextInput = ({\n  name,\n  label,\n  className,\n  errors,\n  floating,\n  ...rest\n}) => {\n  const error = errors.find(error => error.param === name);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${floating && 'form-floating'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: `form-control${error ? ` is-invalid` : ''} ${className}`,\n      id: name,\n      name: name,\n      placeholder: label,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), floating && /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"floating-label\",\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"invalid-feedback\",\n      children: error === null || error === void 0 ? void 0 : error.msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TextInput;\nTextInput.propTypes = {\n  className: PropTypes.string,\n  floating: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  errors: PropTypes.array\n};\nTextInput.defaultProps = {\n  className: '',\n  floating: true,\n  errors: []\n};\nexport default TextInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextInput\");","map":{"version":3,"sources":["C:/Users/KYM/Desktop/calorie/client/src/components/forms/TextInput.js"],"names":["React","PropTypes","TextInput","name","label","className","errors","floating","rest","error","find","param","msg","propTypes","string","bool","isRequired","array","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,SAAf;AAA0BC,EAAAA,MAA1B;AAAkCC,EAAAA,QAAlC;AAA4C,KAAGC;AAA/C,CAAD,KAA2D;AAC3E,QAAMC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAaD,KAAD,IAAWA,KAAK,CAACE,KAAN,KAAgBR,IAAvC,CAAd;AACA,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEI,QAAQ,IAAI,eAAgB,EAA/C;AAAA,4BACE;AACE,MAAA,SAAS,EAAG,eAAcE,KAAK,GAAI,aAAJ,GAAmB,EAAG,IAAGJ,SAAU,EADpE;AAEE,MAAA,EAAE,EAAEF,IAFN;AAGE,MAAA,IAAI,EAAEA,IAHR;AAIE,MAAA,WAAW,EAAEC,KAJf;AAAA,SAKMI;AALN;AAAA;AAAA;AAAA;AAAA,YADF,EAQGD,QAAQ,iBACP;AAAO,MAAA,SAAS,EAAC,gBAAjB;AAAkC,MAAA,OAAO,EAAEJ,IAA3C;AAAA,gBACGC;AADH;AAAA;AAAA;AAAA;AAAA,YATJ,eAaE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,gBAAmCK,KAAnC,aAAmCA,KAAnC,uBAAmCA,KAAK,CAAEG;AAA1C;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnBD;;KAAMV,S;AAqBNA,SAAS,CAACW,SAAV,GAAsB;AACpBR,EAAAA,SAAS,EAAEJ,SAAS,CAACa,MADD;AAEpBP,EAAAA,QAAQ,EAAEN,SAAS,CAACc,IAFA;AAGpBZ,EAAAA,IAAI,EAAEF,SAAS,CAACa,MAAV,CAAiBE,UAHH;AAIpBZ,EAAAA,KAAK,EAAEH,SAAS,CAACa,MAAV,CAAiBE,UAJJ;AAKpBV,EAAAA,MAAM,EAAEL,SAAS,CAACgB;AALE,CAAtB;AAOAf,SAAS,CAACgB,YAAV,GAAyB;AACvBb,EAAAA,SAAS,EAAE,EADY;AAEvBE,EAAAA,QAAQ,EAAE,IAFa;AAGvBD,EAAAA,MAAM,EAAE;AAHe,CAAzB;AAMA,eAAeJ,SAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextInput = ({ name, label, className, errors, floating, ...rest }) => {\r\n  const error = errors.find((error) => error.param === name);\r\n  return (\r\n    <div className={`${floating && 'form-floating'}`}>\r\n      <input\r\n        className={`form-control${error ? ` is-invalid` : ''} ${className}`}\r\n        id={name}\r\n        name={name}\r\n        placeholder={label}\r\n        {...rest}\r\n      />\r\n      {floating && (\r\n        <label className=\"floating-label\" htmlFor={name}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className=\"invalid-feedback\">{error?.msg}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  className: PropTypes.string,\r\n  floating: PropTypes.bool,\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  errors: PropTypes.array,\r\n};\r\nTextInput.defaultProps = {\r\n  className: '',\r\n  floating: true,\r\n  errors: [],\r\n};\r\n\r\nexport default TextInput;\r\n"]},"metadata":{},"sourceType":"module"}