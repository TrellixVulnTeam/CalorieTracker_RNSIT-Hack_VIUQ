{"ast":null,"code":"/*!\n  * Bootstrap manipulator.js v5.0.2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Manipulator = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.2): dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  function normalizeData(val) {\n    if (val === 'true') {\n      return true;\n    }\n\n    if (val === 'false') {\n      return false;\n    }\n\n    if (val === Number(val).toString()) {\n      return Number(val);\n    }\n\n    if (val === '' || val === 'null') {\n      return null;\n    }\n\n    return val;\n  }\n\n  function normalizeDataKey(key) {\n    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`);\n  }\n\n  const Manipulator = {\n    setDataAttribute(element, key, value) {\n      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);\n    },\n\n    removeDataAttribute(element, key) {\n      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);\n    },\n\n    getDataAttributes(element) {\n      if (!element) {\n        return {};\n      }\n\n      const attributes = {};\n      Object.keys(element.dataset).filter(key => key.startsWith('bs')).forEach(key => {\n        let pureKey = key.replace(/^bs/, '');\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n        attributes[pureKey] = normalizeData(element.dataset[key]);\n      });\n      return attributes;\n    },\n\n    getDataAttribute(element, key) {\n      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));\n    },\n\n    offset(element) {\n      const rect = element.getBoundingClientRect();\n      return {\n        top: rect.top + document.body.scrollTop,\n        left: rect.left + document.body.scrollLeft\n      };\n    },\n\n    position(element) {\n      return {\n        top: element.offsetTop,\n        left: element.offsetLeft\n      };\n    }\n\n  };\n  return Manipulator;\n});","map":{"version":3,"sources":["../../src/dom/manipulator.js"],"names":["val","Number","key","chr","Manipulator","setDataAttribute","element","normalizeDataKey","removeDataAttribute","getDataAttributes","attributes","Object","pureKey","normalizeData","getDataAttribute","offset","rect","top","document","left","scrollLeft","position","offsetLeft"],"mappings":";;;;;;;;;EAAA;AACA;AACA;AACA;AACA;AACA;;EAEA,SAAA,aAAA,CAAA,GAAA,EAA4B;IAC1B,IAAIA,GAAG,KAAP,MAAA,EAAoB;MAClB,OAAA,IAAA;IACD;;IAED,IAAIA,GAAG,KAAP,OAAA,EAAqB;MACnB,OAAA,KAAA;IACD;;IAED,IAAIA,GAAG,KAAKC,MAAM,CAANA,GAAM,CAANA,CAAZ,QAAYA,EAAZ,EAAoC;MAClC,OAAOA,MAAM,CAAb,GAAa,CAAb;IACD;;IAED,IAAID,GAAG,KAAHA,EAAAA,IAAcA,GAAG,KAArB,MAAA,EAAkC;MAChC,OAAA,IAAA;IACD;;IAED,OAAA,GAAA;EACD;;EAED,SAAA,gBAAA,CAAA,GAAA,EAA+B;IAC7B,OAAOE,GAAG,CAAHA,OAAAA,CAAAA,QAAAA,EAAsBC,GAAG,IAAK,IAAGA,GAAG,CAAHA,WAAAA,EAAxC,EAAOD,CAAP;EACD;;QAEKE,WAAW,GAAG;IAClBC,gBAAgB,CAAA,OAAA,EAAA,GAAA,EAAA,KAAA,EAAsB;MACpCC,OAAO,CAAPA,YAAAA,CAAsB,WAAUC,gBAAgB,CAAA,GAAA,CAAhDD,EAAAA,EAAAA,KAAAA;IAFgB,CAAA;;IAKlBE,mBAAmB,CAAA,OAAA,EAAA,GAAA,EAAe;MAChCF,OAAO,CAAPA,eAAAA,CAAyB,WAAUC,gBAAgB,CAAA,GAAA,CAAnDD,EAAAA;IANgB,CAAA;;IASlBG,iBAAiB,CAAA,OAAA,EAAU;MACzB,IAAI,CAAJ,OAAA,EAAc;QACZ,OAAA,EAAA;MACD;;MAED,MAAMC,UAAU,GAAhB,EAAA;MAEAC,MAAM,CAANA,IAAAA,CAAYL,OAAO,CAAnBK,OAAAA,EAAAA,MAAAA,CACUT,GAAG,IAAIA,GAAG,CAAHA,UAAAA,CADjBS,IACiBT,CADjBS,EAAAA,OAAAA,CAEWT,GAAG,IAAI;QACd,IAAIU,OAAO,GAAGV,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,EAAd,EAAcA,CAAd;QACAU,OAAO,GAAGA,OAAO,CAAPA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAAkCA,OAAO,CAAPA,KAAAA,CAAAA,CAAAA,EAAiBA,OAAO,CAApEA,MAA4CA,CAA5CA;QACAF,UAAU,CAAVA,OAAU,CAAVA,GAAsBG,aAAa,CAACP,OAAO,CAAPA,OAAAA,CAApCI,GAAoCJ,CAAD,CAAnCI;MALJC,CAAAA;MAQA,OAAA,UAAA;IAxBgB,CAAA;;IA2BlBG,gBAAgB,CAAA,OAAA,EAAA,GAAA,EAAe;MAC7B,OAAOD,aAAa,CAACP,OAAO,CAAPA,YAAAA,CAAsB,WAAUC,gBAAgB,CAAA,GAAA,CAArE,EAAqBD,CAAD,CAApB;IA5BgB,CAAA;;IA+BlBS,MAAM,CAAA,OAAA,EAAU;MACd,MAAMC,IAAI,GAAGV,OAAO,CAApB,qBAAaA,EAAb;MAEA,OAAO;QACLW,GAAG,EAAED,IAAI,CAAJA,GAAAA,GAAWE,QAAQ,CAARA,IAAAA,CADX,SAAA;QAELC,IAAI,EAAEH,IAAI,CAAJA,IAAAA,GAAYE,QAAQ,CAARA,IAAAA,CAAcE;MAF3B,CAAP;IAlCgB,CAAA;;IAwClBC,QAAQ,CAAA,OAAA,EAAU;MAChB,OAAO;QACLJ,GAAG,EAAEX,OAAO,CADP,SAAA;QAELa,IAAI,EAAEb,OAAO,CAACgB;MAFT,CAAP;IAID;;EA7CiB,C","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(val) {\n  if (val === 'true') {\n    return true\n  }\n\n  if (val === 'false') {\n    return false\n  }\n\n  if (val === Number(val).toString()) {\n    return Number(val)\n  }\n\n  if (val === '' || val === 'null') {\n    return null\n  }\n\n  return val\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n\n    Object.keys(element.dataset)\n      .filter(key => key.startsWith('bs'))\n      .forEach(key => {\n        let pureKey = key.replace(/^bs/, '')\n        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n        attributes[pureKey] = normalizeData(element.dataset[key])\n      })\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  },\n\n  offset(element) {\n    const rect = element.getBoundingClientRect()\n\n    return {\n      top: rect.top + document.body.scrollTop,\n      left: rect.left + document.body.scrollLeft\n    }\n  },\n\n  position(element) {\n    return {\n      top: element.offsetTop,\n      left: element.offsetLeft\n    }\n  }\n}\n\nexport default Manipulator\n"]},"metadata":{},"sourceType":"script"}