{"ast":null,"code":"/*!\n  * Bootstrap data.js v5.0.2 (https://getbootstrap.com/)\n  * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Data = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.0.2): dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * ------------------------------------------------------------------------\n   * Constants\n   * ------------------------------------------------------------------------\n   */\n\n  const elementMap = new Map();\n  var data = {\n    set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n\n      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n        return;\n      }\n\n      instanceMap.set(key, instance);\n    },\n\n    get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n\n      return null;\n    },\n\n    remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n\n      const instanceMap = elementMap.get(element);\n      instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n      if (instanceMap.size === 0) {\n        elementMap.delete(element);\n      }\n    }\n\n  };\n  return data;\n});","map":{"version":3,"sources":["../../src/dom/data.js"],"names":["elementMap","set","instanceMap","console","Array","get","remove"],"mappings":";;;;;;;;;EAAA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;;EAEA,MAAMA,UAAU,GAAG,IAAnB,GAAmB,EAAnB;EAEA,IAAA,IAAA,GAAe;IACbC,GAAG,CAAA,OAAA,EAAA,GAAA,EAAA,QAAA,EAAyB;MAC1B,IAAI,CAACD,UAAU,CAAVA,GAAAA,CAAL,OAAKA,CAAL,EAA8B;QAC5BA,UAAU,CAAVA,GAAAA,CAAAA,OAAAA,EAAwB,IAAxBA,GAAwB,EAAxBA;MACD;;MAED,MAAME,WAAW,GAAGF,UAAU,CAAVA,GAAAA,CALM,OAKNA,CAApB,CAL0B,CAAA;MAQ1B;;MACA,IAAI,CAACE,WAAW,CAAXA,GAAAA,CAAD,GAACA,CAAD,IAAyBA,WAAW,CAAXA,IAAAA,KAA7B,CAAA,EAAqD;QACnD;QACAC,OAAO,CAAPA,KAAAA,CAAe,+EAA8EC,KAAK,CAALA,IAAAA,CAAWF,WAAW,CAAtBE,IAAWF,EAAXE,EAAAA,CAAAA,CAA7FD,GAAAA;QACA;MACD;;MAEDD,WAAW,CAAXA,GAAAA,CAAAA,GAAAA,EAAAA,QAAAA;IAhBW,CAAA;;IAmBbG,GAAG,CAAA,OAAA,EAAA,GAAA,EAAe;MAChB,IAAIL,UAAU,CAAVA,GAAAA,CAAJ,OAAIA,CAAJ,EAA6B;QAC3B,OAAOA,UAAU,CAAVA,GAAAA,CAAAA,OAAAA,EAAAA,GAAAA,CAAAA,GAAAA,KAAP,IAAA;MACD;;MAED,OAAA,IAAA;IAxBW,CAAA;;IA2BbM,MAAM,CAAA,OAAA,EAAA,GAAA,EAAe;MACnB,IAAI,CAACN,UAAU,CAAVA,GAAAA,CAAL,OAAKA,CAAL,EAA8B;QAC5B;MACD;;MAED,MAAME,WAAW,GAAGF,UAAU,CAAVA,GAAAA,CAApB,OAAoBA,CAApB;MAEAE,WAAW,CAAXA,MAAAA,CAPmB,GAOnBA,EAPmB,CAAA;;MAUnB,IAAIA,WAAW,CAAXA,IAAAA,KAAJ,CAAA,EAA4B;QAC1BF,UAAU,CAAVA,MAAAA,CAAAA,OAAAA;MACD;IACF;;EAxCY,CAAf","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.2): dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst elementMap = new Map()\n\nexport default {\n  set(element, key, instance) {\n    if (!elementMap.has(element)) {\n      elementMap.set(element, new Map())\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`)\n      return\n    }\n\n    instanceMap.set(key, instance)\n  },\n\n  get(element, key) {\n    if (elementMap.has(element)) {\n      return elementMap.get(element).get(key) || null\n    }\n\n    return null\n  },\n\n  remove(element, key) {\n    if (!elementMap.has(element)) {\n      return\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    instanceMap.delete(key)\n\n    // free up element references if there are no instances left for an element\n    if (instanceMap.size === 0) {\n      elementMap.delete(element)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}